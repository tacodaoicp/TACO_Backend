type Result_2 = 
 variant {
   Err: GovernanceError;
   Ok: Neuron;
 };
type ProposalId = record {id: nat64;};
type NnsNeuronController = 
 service {
   add_hotkey: (neuron_id: NeuronId, hotkey: principal) ->
    (record {
       err: opt GovernanceError;
       ok: bool;
     });
   get_canister_cycles: () -> (record {cycles: nat;}) query;
   get_full_neuron: (neuron_id: nat64) -> (Result_2);
 };
type NeuronStakeTransfer = 
 record {
   block_height: nat64;
   from: opt principal;
   from_subaccount: blob;
   memo: nat64;
   neuron_stake_e8s: nat64;
   to_subaccount: blob;
   transfer_timestamp: nat64;
 };
type NeuronId = record {id: nat64;};
type Neuron = 
 record {
   account: blob;
   aging_since_timestamp_seconds: nat64;
   auto_stake_maturity: opt bool;
   cached_neuron_stake_e8s: nat64;
   controller: opt principal;
   created_timestamp_seconds: nat64;
   deciding_voting_power: opt nat64;
   dissolve_state: opt DissolveState;
   followees: vec record {
                    int32;
                    Followees;
                  };
   hot_keys: vec principal;
   id: opt NeuronId;
   joined_community_fund_timestamp_seconds: opt nat64;
   known_neuron_data: opt KnownNeuronData;
   kyc_verified: bool;
   maturity_disbursements_in_progress: opt vec MaturityDisbursement;
   maturity_e8s_equivalent: nat64;
   neuron_fees_e8s: nat64;
   neuron_type: opt int32;
   not_for_profit: bool;
   potential_voting_power: opt nat64;
   recent_ballots: vec BallotInfo;
   spawn_at_timestamp_seconds: opt nat64;
   staked_maturity_e8s_equivalent: opt nat64;
   transfer: opt NeuronStakeTransfer;
   visibility: opt int32;
   voting_power_refreshed_timestamp_seconds: opt nat64;
 };
type MaturityDisbursement = 
 record {
   account_identifier_to_disburse_to: opt AccountIdentifier;
   account_to_disburse_to: opt Account;
   amount_e8s: opt nat64;
   finalize_disbursement_timestamp_seconds: opt nat64;
   timestamp_of_disbursement_seconds: opt nat64;
 };
type KnownNeuronData = 
 record {
   description: opt text;
   links: opt vec text;
   name: text;
 };
type GovernanceError = 
 record {
   error_message: text;
   error_type: int32;
 };
type Followees = record {followees: vec NeuronId;};
type DissolveState = 
 variant {
   DissolveDelaySeconds: nat64;
   WhenDissolvedTimestampSeconds: nat64;
 };
type BallotInfo = 
 record {
   proposal_id: opt ProposalId;
   vote: int32;
 };
type AccountIdentifier = record {hash: blob;};
type Account = 
 record {
   owner: opt principal;
   subaccount: opt blob;
 };
service : () -> NnsNeuronController
